{"version":3,"sources":["../src/index.ts","../src/core/auth-client.ts","../src/lib/request.ts","../src/utils/common.ts","../src/utils/storage.ts","../src/core/entity-client.ts","../src/core/entities-client.ts","../src/core/lumi-client.ts"],"sourcesContent":["export * from './core/auth-client'\nexport * from './core/entities-client'\nexport * from './core/entity-client'\nexport * from './core/lumi-client'\n","import type { LumiClient } from '@/core/lumi-client'\nimport type { ApiResponse } from '@/lib/request'\nimport { v4 } from 'uuid'\nimport { MessageType, StorageKey } from '@/constants'\nimport { request } from '@/lib/request'\nimport { getIcon, getTitle } from '@/utils/common'\nimport { getStorage, setStorage } from '@/utils/storage'\n\nexport interface User {\n  userId: string\n  email: string\n  userName: string\n  createdTime: string\n}\n\nexport interface MessageSignInData {\n  projectId: string\n  accessToken: string\n  user: User\n}\n\nexport type MessageDataReceive = {\n  type: MessageType.READY\n} | {\n  type: MessageType.SIGN_IN\n  data: MessageSignInData\n}\n\nexport interface MessageInitData {\n  projectId: string\n  icon: string | null\n  title: string | null\n}\n\nexport interface MessageDataSend {\n  type: MessageType.INIT\n  data: MessageInitData\n}\n\nexport class LumiAuthClient {\n  readonly #lumi: LumiClient\n  readonly #popupName: string = `lumi-auth-${v4()}`\n\n  constructor(lumi: LumiClient) {\n    this.#lumi = lumi\n  }\n\n  /** 访问令牌 */\n  public get accessToken(): string | null {\n    return getStorage<string>(StorageKey.ACCESS_TOKEN)\n  }\n\n  public set accessToken(accessToken: string | null) {\n    setStorage(StorageKey.ACCESS_TOKEN, accessToken)\n  }\n\n  /** 用户 */\n  public get user(): User | null {\n    return getStorage<User>(StorageKey.USER)\n  }\n\n  public set user(user: User | null) {\n    setStorage(StorageKey.USER, user)\n  }\n\n  public get isAuthenticated(): boolean {\n    return !!this.accessToken\n  }\n\n  /** 登录 */\n  public signIn(): Promise<MessageSignInData> {\n    const width = 800\n    const height = 600\n    const left = (window.screen.width - width) / 2\n    const top = (window.screen.height - height) / 2\n    const popup = window.open(this.#lumi.config.authOrigin, this.#popupName, `width=${width},height=${height},left=${left},top=${top}`)\n\n    let cleanup: () => void\n    return new Promise<MessageSignInData>((resolve, reject) => {\n      if (!popup)\n        return reject(new Error('Open auth window failed'))\n\n      const timer = setInterval(() => {\n        if (popup.closed)\n          reject(new Error('Auth window closed'))\n      }, 1000)\n\n      const handleMessage = ({ data, origin, source }: MessageEvent<MessageDataReceive | null>): void => {\n        if (origin !== this.#lumi.config.authOrigin || source !== popup)\n          return\n\n        switch (data?.type) {\n          case MessageType.READY: {\n            popup.postMessage({\n              type: MessageType.INIT,\n              data: {\n                projectId: this.#lumi.config.projectId,\n                icon: getIcon(),\n                title: getTitle(),\n              },\n            } satisfies MessageDataSend, this.#lumi.config.authOrigin)\n            break\n          }\n          case MessageType.SIGN_IN: {\n            if (data.data.projectId !== this.#lumi.config.projectId)\n              break\n            popup.close()\n            window.focus()\n            this.accessToken = data.data.accessToken\n            this.user = data.data.user\n            resolve(data.data)\n            break\n          }\n        }\n      }\n      window.addEventListener('message', handleMessage)\n\n      cleanup = () => {\n        clearInterval(timer)\n        window.removeEventListener('message', handleMessage)\n      }\n    }).finally(() => cleanup?.())\n  }\n\n  /** 退出登录 */\n  public signOut(): void {\n    this.accessToken = null\n    this.user = null\n  }\n\n  /** 获取当前用户 */\n  public async refreshUser(): Promise<User> {\n    const res = await request<ApiResponse<User>>(this.#lumi, '/lm/user/info', {\n      method: 'POST',\n    })\n    if (res.code !== 200)\n      throw new Error(res.message)\n    this.user = res.data\n    return res.data\n  }\n\n  /** 监听登录状态变化 */\n  public onAuthChange(callback: (args: {\n    isAuthenticated: boolean\n    user: User | null\n  }) => void): () => void {\n    const handleStorageChange = (event: StorageEvent): void => {\n      if (event.key === StorageKey.ACCESS_TOKEN || event.key === StorageKey.USER || event.key === null) {\n        callback({\n          isAuthenticated: this.isAuthenticated,\n          user: this.user,\n        })\n      }\n    }\n\n    window.addEventListener('storage', handleStorageChange)\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange)\n    }\n  }\n}\n","import type { FetchOptions } from 'ofetch'\nimport type { LumiClient } from '@/core/lumi-client'\nimport { ofetch } from 'ofetch'\n\nexport interface ApiResponse<T> {\n  code: number\n  message: string\n  data: T\n}\n\nexport interface PaginationData<T> {\n  total: number\n  list: T[]\n}\n\nexport function request<T>(lumi: LumiClient, uri: string, options: FetchOptions<'json'> = {}): Promise<T> {\n  if (lumi.auth.accessToken) {\n    options.headers = {\n      Authorization: `Bearer ${lumi.auth.accessToken}`,\n      ...options.headers,\n    }\n  }\n\n  return ofetch<T>(uri, {\n    baseURL: lumi.config.apiBaseUrl,\n    ...options,\n  })\n}\n","export function getIcon(): string | null {\n  return document.querySelector<HTMLLinkElement>('link[rel=\"icon\"]')?.href ?? null\n}\n\nexport function getTitle(): string | null {\n  return document.title ?? null\n}\n","import type { StorageKey } from '@/constants'\n\nexport function setStorage<T>(key: StorageKey, value: T, storage: Storage = localStorage): void {\n  const oldValue = storage.getItem(key)\n  const newValue = value ? JSON.stringify(value) : null\n  if (newValue)\n    storage.setItem(key, newValue)\n  else\n    storage.removeItem(key)\n\n  window.dispatchEvent(new StorageEvent('storage', {\n    key,\n    oldValue,\n    newValue,\n    storageArea: storage,\n  }))\n}\n\nexport function getStorage<T>(key: StorageKey, storage: Storage = localStorage): T | null {\n  const value = storage.getItem(key)\n  try {\n    return value ? JSON.parse(value) : null\n  }\n  catch (_e) {\n    return null\n  }\n}\n","import type { LumiClient } from '@/core/lumi-client'\nimport type { ApiResponse, PaginationData } from '@/lib/request'\nimport { request } from '@/lib/request'\n\nexport interface Entity extends Record<string, any> {\n  id: string\n}\n\nexport class EntityClient {\n  readonly #lumi: LumiClient\n  public readonly entityName: string\n\n  constructor(lumi: LumiClient, entityName: string) {\n    this.#lumi = lumi\n    this.entityName = entityName\n  }\n\n  /** 查询文档列表 */\n  public async list({ filter, sort, limit, skip }: {\n    filter?: any\n    sort?: Record<string, 1 | -1>\n    limit?: number\n    skip?: number\n  } = {}): Promise<PaginationData<Entity>> {\n    if (!limit) {\n      const res = await request<ApiResponse<Entity[]>>(this.#lumi, this.uri('/list'), {\n        method: 'POST',\n        body: { filter, sort },\n      })\n      if (res.code !== 200)\n        throw new Error(res.message)\n      return {\n        total: res.data.length,\n        list: res.data,\n      }\n    }\n    else {\n      const res = await request<ApiResponse<PaginationData<Entity>>>(this.#lumi, this.uri('/find'), {\n        method: 'POST',\n        body: { filter, sort, limit, skip },\n      })\n      if (res.code !== 200)\n        throw new Error(res.message)\n      return res.data\n    }\n  }\n\n  /** 获取单个文档 */\n  public async get(id: string): Promise<Entity | null> {\n    const res = await request<ApiResponse<Entity>>(this.#lumi, this.uri(`/${id}`), {\n      method: 'GET',\n    })\n    if (res.code !== 200)\n      throw new Error(res.message)\n    return res.data\n  }\n\n  /** 创建文档 */\n  public async create(data: Record<string, any>): Promise<Entity> {\n    const res = await request<ApiResponse<Entity>>(this.#lumi, this.uri(), {\n      method: 'POST',\n      body: data,\n    })\n    if (res.code !== 200)\n      throw new Error(res.message)\n    return res.data\n  }\n\n  /** 批量创建文档 */\n  public async createMany(data: Record<string, any>[]): Promise<Entity[]> {\n    const res = await request<ApiResponse<Entity[]>>(this.#lumi, this.uri('/batch'), {\n      method: 'POST',\n      body: data,\n    })\n    if (res.code !== 200)\n      throw new Error(res.message)\n    return res.data\n  }\n\n  /** 更新文档 */\n  public async update(id: string, data: Record<string, any>): Promise<Entity> {\n    const res = await request<ApiResponse<Entity>>(this.#lumi, this.uri(), {\n      method: 'PUT',\n      body: { filter: { _id: id }, update: data },\n    })\n    if (res.code !== 200)\n      throw new Error(res.message)\n    return res.data\n  }\n\n  /** 删除文档 */\n  public async delete(id: string): Promise<void> {\n    const res = await request<ApiResponse<null>>(this.#lumi, this.uri(`/${id}`), {\n      method: 'DELETE',\n    })\n    if (res.code !== 200)\n      throw new Error(res.message)\n  }\n\n  /** 批量删除文档 */\n  public async deleteMany(ids: string[]): Promise<void> {\n    const res = await request<ApiResponse<null>>(this.#lumi, this.uri('/batch-by-ids'), {\n      method: 'DELETE',\n      params: { ids },\n    })\n    if (res.code !== 200)\n      throw new Error(res.message)\n  }\n\n  private uri(suffix = ''): string {\n    return `/lm/${this.#lumi.config.projectId}/${this.entityName}/documents${suffix}`\n  }\n}\n","import type { LumiClient } from '@/core/lumi-client'\nimport { EntityClient } from '@/core/entity-client'\n\nexport class EntitiesClient {\n  readonly #lumi: LumiClient\n  [key: string]: EntityClient\n\n  constructor(lumi: LumiClient) {\n    this.#lumi = lumi\n    return new Proxy(this, {\n      get(target: EntitiesClient, p: string) {\n        if (!(p in target))\n          target[p] = new EntityClient(target.#lumi, p)\n        return target[p]\n      },\n    }) as this\n  }\n}\n","import { LumiAuthClient } from '@/core/auth-client'\nimport { EntitiesClient } from '@/core/entities-client'\n\nexport interface LumiClientConfig {\n  projectId: string\n  apiBaseUrl: string\n  authOrigin: string\n}\n\nexport class LumiClient {\n  public config: LumiClientConfig\n\n  public auth: LumiAuthClient\n  public entities: EntitiesClient\n\n  constructor(config: LumiClientConfig) {\n    this.config = config\n    this.auth = new LumiAuthClient(this)\n    this.entities = new EntitiesClient(this)\n  }\n}\n\nexport function createClient(config: LumiClientConfig): LumiClient {\n  return new LumiClient(config)\n}\n"],"mappings":"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","names":["index_exports","__export","EntitiesClient","EntityClient","LumiAuthClient","LumiClient","createClient","__toCommonJS","import_uuid","import_ofetch","request","lumi","uri","options","__spreadValues","getIcon","_a","_b","getTitle","setStorage","key","value","storage","oldValue","newValue","getStorage","_e","_lumi","_popupName","LumiAuthClient","lumi","__privateAdd","__privateSet","getStorage","accessToken","setStorage","user","left","top","popup","__privateGet","cleanup","resolve","reject","timer","handleMessage","data","origin","source","getIcon","getTitle","__async","res","request","callback","handleStorageChange","event","_lumi","EntityClient","lumi","entityName","__privateAdd","__privateSet","__async","filter","sort","limit","skip","res","request","__privateGet","id","data","ids","suffix","_lumi","EntitiesClient","lumi","__privateAdd","__privateSet","target","p","EntityClient","__privateGet","LumiClient","config","LumiAuthClient","EntitiesClient","createClient"]}